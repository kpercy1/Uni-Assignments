Self Reflection Against Rubric

Conceptual Coverage: 20
Evidence: Project functionality is divided into over 10 different functions for code reuse and abstraction. Vectors are included in functions such as mergeCells(). Arrays are included in virtually all funcions and the main code, as this is how data is stored for the grid used to play the game. Loops (and nested loops) and conditional execution are included in functions such as mergeCells() and shiftGrid(), input and character arrays are included in the function getUsername() and string arrays are included in the function getHighscore().

Value Added: 20
Evidence: Functionality increased by making program controlled by arrow keys. Examples of extension beyond minimal functionality:
		- Used imagesc to display current grid to the user in a visually appealing manner. Axes and labels were made invisible and colourmap was set to be a large range of colours to maximise the visual difference between tiles of different values.
		- Removed toolbar, made figure maximised and increased size of plot so that the plot could be as large as possible with minimal distractions. 
		- Tracked the current score, highscore and displayed to the user. Also displayed to the user when they had completed the game (obtained the 2048 tile).
		- Took username so different users could use the same game, and saved their highscores in a file (highscoreTable.csv) in the same directory so the highscore would exist after the user restarted the matlab program. Note a new highscore was set every iteration that score surpassed highscore rather than only once the game was over, as this allowed highscore to be saved even if the user closed the window before the game was over.

Incremental Development: 20
Evidence: 5 folders corresponding to 5 stages of development of the project were provided. These stages were:
		1- Creating the foundational mergeCell, shiftGrid and insertRandomTile functions, although with some errors. This allowed a very simplistic game which would run for exactly 100 turns.
		2- Fix errors in existing functions, add a scoring mechanism and a function to check if the game is over or the game is complete.
		3- Add functions to store highscores for each username in a csv file.
		4- Provide basic visualisation of grid using the built-in heatmap plot.
		5- Provide visualisation of grid using built-in imagesc function and apply fine-tuning.

Testing: 20
Evidence: Drivers were created while code for functions was written, and driver files can be seen in intermediate folders. As functionality was added to functions, driver functions were also updated to test this (eg. gameComplete function updating highscoreTable.csv for projectV3 onwards). Note the drivers for the functions getUsername, getHighscore, newHighscoreCheck and gameCompleteCheck are all conained in the same file as it is easier to test these functions together. For example, all functions require username as an argument aside from getUsername, so the usernames obtained when testing the getUsername function can also be used to test the other functions.

Comments and Style: 20
Evidence: Comments provide detailed explanation of code blocks in every file. Attempted to make variable names as suitable as possible. Example names are "newHighscoreAcheived", "key" and "getKeyboardPress". The notable exception is the naming of the "combineAdjacentCells" function, which provides little differentiation from the "mergeCells" function it is nested within. However, this is because the functions do essentially the same thing, but mergeCells will change the entire grid while combineAdjecentCells will only change a single cell at a time. Also, the combineAdjacentCells function is never needed outside the mergeCells function, so the distinct naming is arguably less important.

